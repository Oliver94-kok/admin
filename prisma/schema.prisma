// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

enum AttendStatus {
  Active
  Full_Attend
  No_ClockOut
  No_ClockIn
  Absent
  Leave
  Late
}

model User {
  id               String            @id @default(cuid())
  name             String
  username         String
  password         String
  token            String?           @db.LongText
  userImg          String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isLogin          Boolean
  role             UserRole          @default(USER)
  Attends          Attends[]
  Salary           Salary[]
  Leave            Leave[]
  AttendBranch     AttendBranch?
  NotificationUser NotificationUser?
}

model Attends {
  id          String       @id @default(cuid())
  dates       DateTime     @db.Date
  clockIn     DateTime?
  clockOut    DateTime?
  workingHour Float?
  img         String?
  locationIn  String?
  locationOut String?
  overtime    Float?
  fine        Float?
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status      AttendStatus @default(Active)
  users       User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Salary {
  id             String   @id @default(cuid())
  month          Int
  year           Int
  workingDay     Int?
  workingHoour   Int?     @map("workingHour")
  fineLate       Int?
  fineNoClockIn  Int?
  fineNoClockOut Int?
  late           Int?
  notClockIn     Int?
  overTimeHour   Float?
  overTime       Float?
  total          Float?
  perDay         Float?
  bonus          Float?
  allowance      Float?
  cover          Float?
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  users          User?    @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Branch {
  id         String   @id @default(cuid())
  code       String
  address    String
  team       String
  longtitude Float
  latitude   Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AttendBranch {
  id        String   @id @default(cuid())
  clockIn   String?
  clockOut  String?
  userId    String   @unique
  team      String
  startOn   String?
  offDay    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User?    @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Leave {
  id        String   @id @default(cuid())
  userId    String
  reason    String
  type      String
  startDate String
  endDate   String
  status    String
  img       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User?    @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model NotificationUser {
  id        String   @id @default(cuid())
  leave     Json?
  clock     Json?
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User?    @relation(fields: [userId], references: [id])
}
