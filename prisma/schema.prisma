// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id           String        @id @default(cuid())
  name         String
  username     String
  password     String
  token        String?
  userImg      String?
  role         UserRole      @default(USER)
  Attends      Attends[]
  Salary       Salary[]
  Leave        Leave[]
  AttendBranch AttendBranch?
}

model Attends {
  id          String    @id @default(cuid())
  clockIn     DateTime?
  clockOut    DateTime?
  workingHour Float?
  img         String?
  locationIn  String?
  locationOut String?
  userId      String
  users       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Salary {
  id           String @id @default(cuid())
  month        Int
  year         Int
  workingDay   Int
  late         Float?
  overTimeHour Float?
  overTime     Float?
  userId       String
  users        User?  @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Branch {
  id         String @id @default(cuid())
  code       String
  address    String
  team       String
  longtitude Float
  latitude   Float
}

model AttendBranch {
  id       String  @id @default(cuid())
  clockIn  String?
  clockOut String?
  userId   String  @unique
  team     String
  startOn  String?
  offDay   String?
  users    User?   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Leave {
  id        String   @id @default(cuid())
  userId    String
  reason    String
  type      String
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  status    String
  img       String?
  users     User?    @relation(references: [id], fields: [userId], onDelete: Cascade)
}
